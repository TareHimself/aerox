// http://www.pouet.net/prod.php?which=57245
// If you intend to reuse this shader, please add credits to 'Danilo Guanabara'
//GLSL version to use
#version 460
//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(rgba16f,set = 0, binding = 0) uniform image2D image;

//push constants block
layout( push_constant ) uniform constants
{
 float time;
 vec4 data1;
 vec4 data2;
 vec4 data3;
 vec4 data4;
} PushConstants;

float noise(vec3 p) //Thx to Las^Mercury
{
	vec3 i = floor(p);
	vec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);
	vec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;
	a = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);
	a.xy = mix(a.xz, a.yw, f.y);
	return mix(a.x, a.y, f.z);
}

float sphere(vec3 p, vec4 spr)
{
	return length(spr.xyz-p) - spr.w;
}

float flame(vec3 p)
{
	float d = sphere(p*vec3(1.,.5,1.), vec4(.0,-1.,.0,1.));
    //float d = sphere(p*normalize(PushConstants.data3.xyz), vec4(.0,-1.,.0,1.));
	return d + (noise(p+vec3(.0,PushConstants.time*2.,.0)) + noise(p*3.)*.5)*.25*(p.y) ;
}

float scene(vec3 p)
{
	return min(100.-length(p) , abs(flame(p)) );
}

vec4 raymarch(vec3 org, vec3 dir)
{
	float d = 0.0, glow = 0.0, eps = 0.02;
	vec3  p = org;
	bool glowed = false;
	
	for(int i=0; i<64; i++)
	{
		d = scene(p) + eps;
		p += d * dir;
		if( d>eps )
		{
			if(flame(p) < .0)
				glowed=true;
			if(glowed)
       			glow = float(i)/64.;
		}
	}
	return vec4(p,glow);
}

void main()
{
    ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 iResolution = imageSize(image);
    float iTime = PushConstants.time;

	
    if(fragCoord.x < iResolution.x && fragCoord.y < iResolution.y)
    {
        vec2 v = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;
        v.x *= iResolution.x/iResolution.y;
        
        vec3 org = vec3(0., -2., 4.);
        vec3 dir = normalize(vec3(v.x*1.6, -v.y, -1.5));
        
        vec4 p = raymarch(org, dir);
        float glow = p.w;
        
        // vec4 col = mix(vec4(1.,.5,.1,1.), vec4(0.1,.5,1.,1.), p.y*.02+.4);
        vec4 col = mix(PushConstants.data1, PushConstants.data2, p.y*.02+.4);
        
        imageStore(image,fragCoord, mix(vec4(0.), col, pow(glow*2.,4.)));
    }
	//fragColor = mix(vec4(1.), mix(vec4(1.,.5,.1,1.),vec4(0.1,.5,1.,1.),p.y*.02+.4), pow(glow*2.,4.));

}