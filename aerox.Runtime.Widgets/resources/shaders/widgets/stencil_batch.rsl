#include "utils.rsl"

struct StencilClip
{
    mat3 transform;
    float2 size;
};

layout(buffer_reference, scalar) readonly buffer StencilBuffer {
    StencilClip clips[];
};

push(scalar){
    mat4 projection;
    StencilBuffer batch;
};

@Vertex {
    layout(location = 0) out int oQuadIndex;

    void main()
    {
        float2 dummyUV = float2(0.0);

        StencilClip quad = push.batch.clips[gl_InstanceIndex];
        generateRectVertex(quad.size, push.projection, quad.transform, gl_VertexIndex, gl_Position, dummyUV);
        oQuadIndex = gl_InstanceIndex;
    }
}

@Fragment {
    layout (location = 0,$flat) in int iQuadIndex;
    layout (location = 0) out float4 oColor;

    void main() {
        StencilClip renderInfo = push.batch.clips[iQuadIndex];
        float4 result = applyBorderRadius(gl_FragCoord.xy,float4(float3(0.0),1.0), float4(0.0), renderInfo.size, renderInfo.transform);
        if(result.w > 0.5){
            discard;
        }
        oColor = float4(float3(0.0),0.0);
    }
}